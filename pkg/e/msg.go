package e

var MsgFlags = map[int]string{
	SUCCESS:                    "OK",
	ERROR:                      "FAIL",
	INVALID_PARAMS:             "INVALID_PARAMS",
	ERROR_INVALID_EMAIL:        "ERROR_INVALID_EMAIL",
	ERROR_INVALID_VERIFICATION: "ERROR_INVALID_VERIFICATION",
	ERROR_INVALID_ADDRESS:      "ERROR_INVALID_ADDRESS",
	ERROR_NOT_EXIST_EMAIL:      "ERROR_NOT_EXIST_EMAIL",
	ERROR_ALREADY_LINKED:       "ERROR_ALREADY_LINKED",
	ERROR_LINK_FAIL:            "ERROR_LINK_FAIL",
	ERROR_NOT_LINKED:           "ERROR_NOT_LINKED",

	ERROR_NOT_EXIST_USER:              "ERROR_NOT_EXIST_USER",
	ERROR_ALREADY_MEMBERSHIP:          "ERROR_ALREADY_MEMBERSHIP",
	ERROR_BUY_MEMBERSHIP_FAIL:         "ERROR_BUY_MEMBERSHIP_FAIL",
	ERROR_BUY_POINT_FAIL:              "ERROR_BUY_POINT_FAIL",
	ERROR_INSUFFICIENT_CHARGE_BALANCE: "ERROR_INSUFFICIENT_CHARGE_BALANCE",

	ERROR_PROVIDE_LOCATION_PROOF_FAIL: "ERROR_PROVIDE_LOCATION_PROOF_FAIL",
	ERROR_GET_LOCATION_PROOFS_FAIL:    "ERROR_GET_LOCATION_PROOFS_FAIL",

	ERROR_INVALID_USERNAME_OR_PASSWORD: "ERROR_INVALID_USERNAME_OR_PASSWORD",
	ERROR_LOGIN_FAIL:                   "ERROR_LOGIN_FAIL",
	ERROR_REGISTRY_FAIL:                "ERROR_REGISTRY_FAIL",

	ERROR_MISSING_AUTH_HEADER: "ERROR_MISSING_AUTH_HEADER",
	ERROR_INVALID_AUTH_HEADER: "ERROR_INVALID_AUTH_HEADER",
	ERROR_INVALID_AUTH_TOKEN:  "ERROR_INVALID_AUTH_TOKEN",
}

// GetMsg get error information based on Code
func GetMsg(code int) string {
	msg, ok := MsgFlags[code]
	if ok {
		return msg
	}

	return MsgFlags[ERROR]
}
